diff --git a/python-module/dssp-python-plugin.cpp b/python-module/dssp-python-plugin.cpp
index 0ea967e..4dbaeaf 100644
--- a/python-module/dssp-python-plugin.cpp
+++ b/python-module/dssp-python-plugin.cpp
@@ -206,7 +206,7 @@ struct to_python_bridge_partner
 			boost::python::type_info iv = boost::python::type_id<dssp::residue_info>();
 			const boost::python::converter::registration* cv = boost::python::converter::registry::query(iv);
 			assert(cv != nullptr);
-	
+
 			boost::python::type_info dv = boost::python::type_id<ladder_direction_type>();
 			const boost::python::converter::registration* ev = boost::python::converter::registry::query(dv);
 			assert(ev != nullptr);
@@ -323,10 +323,10 @@ BOOST_PYTHON_MODULE(mkdssp)
 		.def("acceptor", &dssp::residue_info::acceptor, args("indexnr"), "Return a tuple containing the residue and bond energy for the acceptor with index indexnr")
 		.def("donor", &dssp::residue_info::donor, args("indexnr"), "Return a tuple containing the residue and bond energy for the donor with index indexnr");
 
-	class_<dssp_wrapper, boost::noncopyable>("dssp", init<std::string, optional<int, int, bool>>())
+	class_<dssp_wrapper, boost::noncopyable>("dssp", init<std::string, optional<int>, optional<int>, optional<bool>>())
 		.add_property("statistics", &dssp_wrapper::get_statistics)
 		.def("__iter__", iterator<dssp_wrapper>())
 		.def("get", &dssp_wrapper::get, args("asym_id", "seq_id"), "Return the residue info object for the residue with specified asym_id and seq_id");
 
 	def("TestBond", test_bond_between_residues, args("a", "b"), "Returns true if residues a and b are bonded according to DSSP");
-}
\ No newline at end of file
+}
